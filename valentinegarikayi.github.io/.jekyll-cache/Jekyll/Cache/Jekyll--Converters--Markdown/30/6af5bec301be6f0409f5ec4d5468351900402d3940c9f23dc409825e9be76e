I"å)<p><a href="https://github.com/barryclark/bashstrap">Bashstrap</a> is a quick way to spruce up OSX terminal. It cuts out the fluff, adds in timesaving features, and provides a solid foundation for customizing your terminal style.<!--more--></p>

<p><img src="https://raw.github.com/barryclark/bashstrap/master/screenshot.png" alt="bashstrap screenshot" /></p>

<h2 id="feature-list">Feature list</h2>

<h3 id="faster-directory-navigation">Faster directory navigation</h3>

<ul>
  <li>Open your current directory in Sublime Text (with just 2 characters)</li>
  <li>Jump directories rapidly, without having to set aliases‚Äîusing Z (my favorite feature!)</li>
  <li>Tab bar displays your current directory</li>
  <li>Lots of quick shortcut aliases that I use for git and moving around directories</li>
</ul>

<h3 id="customized-bash-prompt-line">Customized bash prompt line</h3>

<ul>
  <li>Git branch status inline</li>
  <li>‚ò† ahoy! An easily customizable symbol</li>
  <li>Stripped out extraneous text</li>
</ul>

<h3 id="updated-color-scheme">Updated color scheme</h3>

<ul>
  <li>Colored ‚Äòls‚Äô</li>
  <li>Syntax highlighted ‚Äòcat‚Äô</li>
</ul>

<p><a href="https://github.com/barryclark/bashstrap">Install via Github (takes 10 mins)</a></p>

<hr />

<p>In the rest of this post I‚Äôll go into detail on how I configured the features. I‚Äôm not an expert at customizing terminal‚Äîif you notice anything that could be improved, please leave a comment or open a pull request.</p>

<h2 id="supports">Supports</h2>

<h3 id="bash-not-zsh">Bash, not zsh</h3>

<p>I don‚Äôt have a need for any of <a href="http://en.wikipedia.org/wiki/Z_shell#Features">z shell‚Äôs features</a> so I decided not to go that route. Bash is capable of a lot of those features now, like command-line completion. I looked at <a href="https://github.com/robbyrussell/oh-my-zsh">oh-my-zsh</a> briefly, but there weren‚Äôt any themes to my liking.</p>

<h3 id="iterm-not-terminal">iTerm, not Terminal</h3>

<p>This was primarily because I had a lot of difficulty customizing the stock terminal that comes with OSX. It was way easier to edit colors and preferences in iTerm 2. There are some <a href="http://www.iterm2.com/#/section/features/">iTerm features</a> that I‚Äôd expect to use in the future too.</p>

<h3 id="sublime-text-not-vim">Sublime Text, not Vim</h3>

<p>I use Sublime Text for virtually all text editing so decided to leave out the .vimrc that customizes Vim.</p>

<h2 id="file-organization">File Organization</h2>

<p>File organization based on <a href="https://github.com/mathiasbynens/dotfiles">Mathias Bynens epic dotfiles</a>.</p>

<p>The installation notes on the repo cover installing to your home directory, which is where OSX looks for your dotfiles. This works perfectly, but I found that housing my dotfiles in their own folder and symlinking to them from my home directory gave a lot of advantages.</p>

<p>It makes it easier to backup, version and share my dotfiles by creating a Github repo for them. There‚Äôs even a landing page dedicated to <a href="http://dotfiles.github.io/">dotfiles on Github</a>.</p>

<p>To install to a folder:</p>

<ol>
  <li>
    <p>Fork and clone the <a href="https://github.com/barryclark/bashstrap">Bashstrap repo</a> to a subfolder of your home directory. I keep my dotfiles in ~/Code/dotfiles.</p>
  </li>
  <li>
    <p>Backup your current dotfiles (optional)</p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cp ~/.bash_profile ~/.bash_profile_old
cp ~/.bashrc ~/.bashrc_old
cp ~/.gitconfig ~/.gitconfig_old
</code></pre></div>    </div>
  </li>
  <li>
    <p>Create symlinks to the new dotfiles</p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ln -s ~/.bash_profile ~/your/path/to/.bash_profile
ln -s ~/.bashrc ~/your/path/to/.bashrc
ln -s ~/.gitconfig ~/your/path/to/.gitconfig
ln -s ~/.gitignore ~/your/path/to/.gitignore
ln -s ~/.hushlogin ~/your/path/to/.hushlogin
</code></pre></div>    </div>
  </li>
</ol>

<p>Side note: I wish I‚Äôd realized there‚Äôs a <a href="https://github.com/mattbanks/dotfiles-syntax-highlighting-st2">Sublime Text syntax highlighting package for dotfiles</a> before I started work on customizing them. It‚Äôs really helpful!</p>

<h2 id="productivity-features">Productivity Features</h2>

<h3 id="open-files-and-directories-in-sublime-text">Open files and directories in Sublime Text</h3>

<p>There are multiple ways to set this up, some more complicated than others. The best I found is a this one-liner that‚Äôs included in the .bash_profile.</p>

<ul>
  <li>alias s=‚Äôopen -a ‚ÄúSublime Text 2‚Ä≥‚Äò</li>
</ul>

<p>This enables you to just type ‚Äús .‚Äù to open the current directory in Sublime Text. Or ‚Äús file-name.ext‚Äù to open a file.</p>

<h3 id="z-directory-jumping">Z directory jumping</h3>

<p>Possibly my favorite feature is Z (not to be confused with zsh, which is a totally different thing).</p>

<p>Z removes a lot of the need for cd‚Äôing around directories. Instead you type ‚Äúz‚Äù then any substring of the name of the directory you want to jump to. For example I can be in any dir and type ‚Äúz dotf‚Äù to jump straight into my dotfiles dir. This means I don‚Äôt need to bother setting up aliases for frequently visited directories! It works really really well.</p>

<p>You need to cd around a bit after installing it so that it builds up a memory of the directories you visit. Here‚Äôs the <a href="https://github.com/rupa/z">Z repo</a>.</p>

<h3 id="changing-the-bash-prompt">Changing the bash prompt</h3>

<p>My bash prompt is simply ‚Äú[user] in [current-directory] on [current-git-branch]‚Äú, where current-git-branch will only display if I‚Äôm within a dir that has a git repo. This came straight from <a href="https://github.com/gf3/dotfiles">@gf3‚Ä≤s bash prompt</a>. I really dig it, and made a few customizations.</p>

<p>For more bash prompt hacking, this <a href="http://www.reddit.com/r/programming/comments/697cu/bash_users_what_do_you_have_for_your_ps1/">Reddit topic</a> contains a lot of good inspiration, and this <a href="http://stackoverflow.com/questions/103857/what-is-your-favorite-bash-prompt">Stack Overflow</a> too.</p>

<h3 id="silence-the-welcome-last-login-was-at-x-message">Silence the ‚Äúwelcome, last login was at X‚Äù message</h3>

<p>.hushlogin is awesome. Credit to <a href="https://github.com/mathiasbynens/dotfiles/blob/master/.hushlogin">Mathias</a>.</p>

<h3 id="display-the-current-dir-name-as-the-tab-title">Display the current dir name as the tab title</h3>

<p>With multiple tabs open it‚Äôs nice to be able to see what‚Äôs going on in them. I found a <a href="http://apple.stackexchange.com/questions/90725/for-iterm2-how-do-i-make-the-working-directory-appear-in-the-window-title/90737#90737">nice little one-liner for this on Stack Exchange</a>, it now lives in my .bash_profile. It displays just the name of the current directory as the tab title.</p>

<h3 id="aliases">Aliases</h3>

<p>Z is amazing and eliminates a lot of the need for aliases but there are still some spots where they‚Äôre useful. I added in ‚Äú..‚Äù, ‚Äú‚Ä¶‚Äù and ‚Äú‚Ä¶.‚Äù to skip back 1, 2 or 3 directories. I stuck in a couple of aliases to directories that I use frequently too, these can be easily customized and added to.</p>

<p>I use ‚Äúls‚Äù and ‚Äúls -la‚Äù a lot, so there are a number of ls aliases. Typing ‚Äúl‚Äù gives you the colorized list in long format, and ‚Äúla‚Äù includes dotfiles in the list. These show the directories in blue, which is nice for scannability.</p>

<p>If you‚Äôd like ‚Äúcat‚Äù with syntax highlighting you can use the ‚Äúc‚Äù alias. You‚Äôll just need to install <a href="http://pygments.org/">Pygments</a> first.</p>

<h3 id="shortcut-key-binding">Shortcut key binding</h3>

<p>Binding shortcut keys to things I want (delete previous word, skip to EOL, etc) seems like a pain in the ass. Instead I opted to get used to the bash shortcuts. Here‚Äôs a <a href="http://www.howtogeek.com/howto/ubuntu/keyboard-shortcuts-for-bash-command-shell-for-ubuntu-debian-suse-redhat-linux-etc/">list of the shortcuts I use the most</a>.</p>

<h2 id="style-updates">Style Updates</h2>

<p>I installed <a href="http://www.iterm2.com/#/section/home">iTerm 2</a> because color tweaking in OSX terminal was a painful process and taking me hours. iTerm 2 lets you preview as you select from the color pallete, which rocks.</p>

<h3 id="font">Font</h3>

<p>I played around with a lot of fixed width fonts, including Adobe‚Äôs <a href="http://blogs.adobe.com/typblography/2012/09/source-code-pro.html">Source Code Pro</a>, and in the end settled on Menlo that comes with OSX. I like 16pt Menlo regular. This can be changed in iTerm Preferences &gt; Profiles &gt; Default &gt; Text &gt; Regular Font (make sure you change the Non-ASCII version to be the same too).</p>

<p>It looks a lot better without bold too. I switched to the non-bold font by unchecking ‚ÄúDraw bold text in bold font‚Äù in iTerm Preferences &gt; Profiles &gt; Default &gt; Text &gt; Text Rendering.</p>

<h3 id="color-scheme">Color scheme</h3>

<p>The bash prompt edits in .bash_profile took care of a lot of the coloring. But there were still a few things that needed tweaking.</p>

<p>I wanted a lighter blue for the directory highlighting. The quickest way I found to change this was by changing the iTerm blue color. iTerm Preferences &gt; Profiles &gt; Default &gt; Colors &gt; click Blue and make it lighter.</p>

<h3 id="cursor">Cursor</h3>

<p>While you‚Äôre in the iTerm color settings you might notice cursor colors too. These are really fun to change! Bright green or pink make really nice cursor colors. Click the ‚ÄúSmart cursor color‚Äù checkbox, then you can edit Cursor color.</p>

<p>I also like having selection text as the same color as the cursor. I went for bright green, with black text.</p>

<p>Also, my preference is for the thin vertical bar cursor. This can be change in iTerm Preferences &gt; Profiles &gt; Default &gt; Text &gt; Cursor.</p>

<h3 id="unicode-symbol">Unicode symbol</h3>

<p>The avatar of the bash prompt! I made this really easy to change by creating a variable for it in .bash_profile. Just command+f for ‚Äúsymbol‚Äù. A few favorites: ‚ö° ‚ò† ‚ò¢ ‚ô•. <a href="http://en.wikipedia.org/wiki/Unicode_symbols">Tables worth of symbols here</a> to copy paste in.</p>

<h2 id="thats-all-for-now">That‚Äôs all for now!</h2>

<p>All of these tweaks and features are included, it only takes 10 minutes to install.</p>

<p><a href="https://github.com/barryclark/bashstrap">Bashstrap on Github</a></p>

:ET